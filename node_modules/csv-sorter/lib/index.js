"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sort = void 0;
const csv_parse_1 = require("csv-parse");
const fs_1 = __importDefault(require("fs"));
const process_1 = require("process");
const split_string_1 = __importDefault(require("split-string"));
function sort(config, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        if (callback) {
            Promise.all([_sortCSV(config)]).then((values) => {
                callback(values[0]);
            }).catch(reason => {
                callback(null, reason);
            });
        }
        else {
            return Promise.all([_sortCSV(config)]).then((values) => {
                return values[0];
            }).catch(reason => {
                return reason;
            });
        }
    });
}
exports.sort = sort;
function _sortCSV(config) {
    return new Promise((resolve, reject) => {
        config.stdin && fs_1.default.writeFileSync('tmp.csv', config.stdin);
        const file = config.stdin ? 'tmp.csv' : config.src;
        fs_1.default.readFile(file, (err, data) => {
            if (err)
                return reject(err);
            const firstLine = data.toString().split('\n')[0];
            const delimiter = String.fromCharCode(recognizeDelimiter(data));
            const splittedLine = (0, split_string_1.default)(firstLine, { separator: delimiter, quotes: ['"'] });
            let columns = [];
            for (let i = 0; i < splittedLine.length; i++) {
                columns.push(`${i + 1}`);
            }
            const records = [];
            const parser = (0, csv_parse_1.parse)(data, {
                bom: true,
                ltrim: true,
                rtrim: true,
                columns: columns,
                delimiter: delimiter,
            });
            let first = {};
            parser.on('readable', function () {
                let record;
                while ((record = parser.read()) !== null) {
                    if (Object.keys(first).length === 0 && !config.sortWithHeader) {
                        Object.assign(first, record);
                    }
                    else {
                        records.push(record);
                    }
                }
            });
            parser.on('end', function () {
                let sorted = records.sort((a, b) => {
                    if (!config.reverse) {
                        if (!isNaN(a[config.sortColumn]) && !isNaN(b[config.sortColumn])) {
                            return parseFloat(a[config.sortColumn]) - parseFloat(b[config.sortColumn]);
                        }
                        return a[config.sortColumn].localeCompare(b[config.sortColumn], undefined, {
                            numeric: true,
                            sensitivity: 'base'
                        });
                    }
                    else {
                        if (!isNaN(a[config.sortColumn]) && !isNaN(b[config.sortColumn])) {
                            return parseFloat(b[config.sortColumn]) - parseFloat(a[config.sortColumn]);
                        }
                        return b[config.sortColumn].localeCompare(a[config.sortColumn], undefined, {
                            numeric: true,
                            sensitivity: 'base'
                        });
                    }
                });
                !config.sortWithHeader && sorted.unshift(first);
                config.dest || config.stdout ? write(sorted, splittedLine.length, delimiter) : !config.dest && !config.cli ? resolve(sorted) : null;
            });
            parser.on('error', function (err) {
                return reject(err);
            });
        });
        function write(sorted, length, delimiter) {
            try {
                sorted.forEach((elem, j) => {
                    let line = ``;
                    for (let i = 0; i < length; i++) {
                        if (i === length - 1) {
                            line += elem[i + 1].includes(delimiter) ? `"${elem[i + 1]}"` : `${elem[i + 1]}`;
                        }
                        else {
                            line += elem[i + 1].includes(delimiter) ? `"${elem[i + 1]}"${delimiter}` : `${elem[i + 1]}${delimiter}`;
                        }
                    }
                    if (sorted.length - 1 > j)
                        line += `\n`;
                    config.dest && fs_1.default.appendFileSync(config.dest, line);
                    config.stdout && process.stdout.write(line);
                });
                resolve(sorted);
            }
            catch (err) {
                return reject(err);
            }
        }
        function recognizeDelimiter(fileBuffer) {
            const delimiters = [',', ';', '|', '\t'];
            const index = delimiters
                .map(function (separator) {
                return fileBuffer.indexOf(separator);
            })
                .reduce(function (p, c) {
                return p === -1 || (c !== -1 && c < p) ? c : p;
            });
            return (fileBuffer[index] || 44);
        }
    });
}
if (process_1.argv[0].includes('node') && !process_1.argv[1].includes('jest') && process_1.argv[2]) {
    (function () {
        return __awaiter(this, void 0, void 0, function* () {
            const args = getArgs();
            const file = yield read(process_1.stdin);
            if (!/^\d+$/.test(args['c'])) {
                process_1.stdout.write('sortColumn argument is not UInt\n');
            }
            else if (!fs_1.default.existsSync(args['s']) && !file.length) {
                process_1.stdout.write('Source file does not exist\n');
            }
            else if (file && file.length && args['s']) {
                process_1.stdout.write('Two source files provided, which one to take?\n');
            }
            else {
                _sortCSV({
                    src: args['s'] ? args['s'] : '',
                    stdin: file && file.length ? file : null,
                    dest: args['d'] ? args['d'] : null,
                    sortColumn: parseInt(args['c']),
                    reverse: args['R'] ? true : false,
                    sortWithHeader: args['H'] ? true : false,
                    cli: true,
                    stdout: !args['d'] || args['O']
                });
            }
        });
    })();
}
function read(stream) {
    var stream_1, stream_1_1;
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        let str = '';
        if (stream.isTTY)
            return Buffer.from(str, 'utf-8');
        try {
            for (stream_1 = __asyncValues(stream); stream_1_1 = yield stream_1.next(), !stream_1_1.done;) {
                const i = stream_1_1.value;
                str += i;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stream_1_1 && !stream_1_1.done && (_a = stream_1.return)) yield _a.call(stream_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Buffer.from(str, 'utf-8');
    });
}
function getArgs() {
    const args = {};
    process.argv
        .slice(2, process.argv.length)
        .forEach(arg => {
        if (arg.slice(0, 2) === '--') {
            const params = arg.split('=');
            const paramsFlag = params[0].slice(2, params[0].length);
            const paramsValue = params.length > 1 ? params[1] : true;
            args[paramsFlag] = paramsValue;
        }
        else if (arg[0] === '-') {
            const options = arg.slice(1, arg.length).split('');
            options.forEach(option => {
                args[option] = true;
            });
        }
    });
    return args;
}
//# sourceMappingURL=index.js.map